#+TITLE: all-the-icons-nerd-fonts
#+AUTHOR: Mohsin Kaleem

A bridge between [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] and [[https://github.com/twlz0ne/nerd-fonts.el][nerd-fonts]].

I installed Emacs on my Ubuntu Server as my dev environment, without GUI support. Connecting it from Windows Terminal on my laptop.
It works great, just not as pretty as I expected. So I installed all-the-icons to make it much more prettier. Sadly my Windows Terminal uses nerd-fonts, which doesn't work well with all-the-icons.
Later I found this repo and tested it locally, it's great and easy to use. Supporting [[https://github.com/asok/all-the-icons-ivy][all-the-icons-ivy]], [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]], [[https://github.com/jaypei/emacs-neotree][neotree]] out-of-box. So I fork it and made some customizations.

This package defines a bunch of all-the-icons families for the various nerd-fonts.
This means you can use ~all-the-icons-nerd-fa~ to insert a font-awesome icon through nerd-fonts just like you would with ~all-the-icons-faicon~.
Furthermore this package defines a helper function ~all-the-icons-nerd-fonts-prefer~ to convert references to all-the-icons icons to equivalent or similar enough nerd-fonts icons.

with all-the-icons installed, you can use ~(all-the-icons-icon-for-file "foo.py")~ to show an icon for a Python source file, actually it invokes ~(all-the-icons-alltheicon "python")~ in the backend.
But if you have added ~(all-the-icons-nerd-fonts-prefer)~ in your init file, the function invoked would be ~(all-the-icons-nerd-dev "python")~.

Please note that kind of replacing only applied for functions such as ~(all-the-icons-icon-for-file)~, ~(all-the-icons-icon-for-mode)~. Some themes using the underlying functions like ~(all-the-icons-octicon)~ directly, for that kind of situation, you may need to replace it to ~(all-the-icons-nerd-oct)~ or any other nerd font functions by hand in the source ~.el~ file.

#+begin_src text
all-the-icons-octicon    ->    all-the-icons-nerd-oct
all-the-icons-material   ->    all-the-icons-nerd-mdi
all-the-icons-faicon     ->    all-the-icons-nerd-fa
all-the-icons-wicon      ->    all-the-icons-nerd-weather
#+end_src


* Table of Contents                                                     :TOC:
- [[#demo][Demo]]
- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#config][Config]]

* Demo
[[https://github.com/asok/all-the-icons-ivy][all-the-icons-ivy]]
#+CAPTION: all-the-icons-ivy screenshot
[[https://github.com/rollingstarky/all-the-icons-nerd-fonts/blob/master/screenshots/ivy.png?raw=true]]

[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]]
#+CAPTION: all-the-icons-dired screenshot
https://github.com/rollingstarky/all-the-icons-nerd-fonts/blob/master/screenshots/dired.png?raw=true

[[https://github.com/jaypei/emacs-neotree][neotree]]
#+CAPTION: neotree screenshot
[[https://github.com/rollingstarky/all-the-icons-nerd-fonts/blob/master/screenshots/neotree.png?raw=true]]

[[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]]
#+CAPTION: emacs-dashboard screenshot
[[https://github.com/rollingstarky/all-the-icons-nerd-fonts/blob/master/screenshots/dashboard.png?raw=true]]

* Installation
Clone the repo.
   
#+begin_src shell
cd ~/.emacs.d/elpa
git clone git@github.com:rollingstarky/all-the-icons-nerd-fonts.git
#+end_src

Add the repo path to your emacs ~load-path~. Load it when needed.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/all-the-icons-nerd-fonts")
(require 'all-the-icons-nerd-fonts)
(all-the-icons-nerd-fonts-prefer)
#+end_src

* Usage
Testing icon functions in ~*scratch*~ buffer
#+CAPTION: test icon functions in Lisp Interaction mode
[[https://github.com/rollingstarky/all-the-icons-nerd-fonts/blob/master/screenshots/function-demo.png?raw=true]]

For some packages like [[https://github.com/jaypei/emacs-neotree][neotree]], it uses the function ~(display-graphic-p)~ to dicide whether show icons or not. If your emacs is terminal version just like me, you may need to replace it to ~(not nil)~ in the source code.

* Config
You can add more icon bindings in you init file.
For example, there are no binding for MIDI file in the defination from all-the-icons. You can set it up like below:

#+begin_src emacs-lisp
(push '(all-the-icons-nerd-mdi "music-note" :face all-the-icons-blue-alt) extra-all-the-icons-extension-icon-alist)
#+end_src

For other situations like, the icon for ~.ps1~ powershell script is showed as a question mark. You can solve this issue like this:
#+begin_src emacs-lisp
(push '((all-the-icons-fileicon . "powershell") . (all-the-icons-nerd-cod . "terminal-powershell")) all-the-icons-nerd-fonts-convert-icons)
#+end_src

Just put the config code blocks in your init file between ~(require 'all-the-icons-nerd-fonts)~ and ~(all-the-icons-nerd-fonts-prefer)~.
Above two demos are already included in the package.
